import random
import matplotlib.pyplot as plt
from sorting.bubble_sort import measure_time as bubble_time
from sorting.insertion_sort import measure_time as insertion_time
from sorting.merge_sort import measure_time as merge_time
from sorting.quick_sort import measure_time as quick_time
from searching.linear_search import measure_time as linear_time
from searching.binary_search import measure_time as binary_time

sizes = [100, 1000, 10000]
sorting_algorithms = {
    'Bubble Sort': bubble_time,
    'Insertion Sort': insertion_time,
    'Merge Sort': merge_time,
    'Quick Sort': quick_time
}
searching_algorithms = {
    'Linear Search': linear_time,
    'Binary Search': binary_time
}

sort_results = {alg: [] for alg in sorting_algorithms}
search_results = {alg: [] for alg in searching_algorithms}

for size in sizes:
    arr = [random.randint(0, size) for _ in range(size)]
    arr_sorted = sorted(arr)
    target = arr[size // 2]
    for name, func in sorting_algorithms.items():
        t = func(arr)
        sort_results[name].append(t)
    for name, func in searching_algorithms.items():
        if name == 'Binary Search':
            t = func(arr_sorted, target)
        else:
            t = func(arr, target)
        search_results[name].append(t)

# Plot sorting
plt.figure(figsize=(10,5))
for name, times in sort_results.items():
    plt.plot(sizes, times, marker='o', label=name)
plt.title('Sorting Algorithms Execution Time')
plt.xlabel('Number of Elements')
plt.ylabel('Time (seconds)')
plt.legend()
plt.grid(True)
plt.savefig('sorting_comparison.png')
plt.show()

# Plot searching
plt.figure(figsize=(10,5))
for name, times in search_results.items():
    plt.plot(sizes, times, marker='o', label=name)
plt.title('Searching Algorithms Execution Time')
plt.xlabel('Number of Elements')
plt.ylabel('Time (seconds)')
plt.legend()
plt.grid(True)
plt.savefig('searching_comparison.png')
plt.show()
